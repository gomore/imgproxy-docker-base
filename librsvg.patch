diff --git a/rsvg_internals/src/drawing_ctx.rs b/rsvg_internals/src/drawing_ctx.rs
index 47a5c3a2..c86d8083 100644
--- a/rsvg_internals/src/drawing_ctx.rs
+++ b/rsvg_internals/src/drawing_ctx.rs
@@ -206,7 +206,9 @@ impl SavedCr {
 
 impl Drop for SavedCr {
     fn drop(&mut self) {
-        self.0.restore();
+        if self.0.status() == cairo::Status::Success {
+            self.0.restore();
+        }
     }
 }
 
diff --git a/rsvg_internals/src/handle.rs b/rsvg_internals/src/handle.rs
index 558fc8ba..d7a3f88b 100644
--- a/rsvg_internals/src/handle.rs
+++ b/rsvg_internals/src/handle.rs
@@ -16,6 +16,8 @@ use crate::rect::Rect;
 use crate::structure::IntrinsicDimensions;
 use url::Url;
 
+use std::panic;
+
 /// Loading options for SVG documents.
 #[derive(Clone)]
 pub struct LoadOptions {
@@ -247,19 +249,26 @@ impl Handle {
 
         cr.save();
 
-        let res = draw_tree(
-            DrawingMode::LimitToStack { node, root },
-            cr,
-            viewport,
-            dpi,
-            false,
-            is_testing,
-            &mut AcquiredNodes::new(&self.document),
-        );
-
-        cr.restore();
-
-        res.map(|_bbox| ())
+        let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {
+            let r = draw_tree(
+                DrawingMode::LimitToStack { node, root },
+                cr,
+                viewport,
+                dpi,
+                false,
+                is_testing,
+                &mut AcquiredNodes::new(&self.document),
+            );
+
+            cr.restore();
+
+            r
+        }));
+
+        match res {
+            Ok(r) => r.map(|_bbox| ()),
+            Err(_) => Err(RenderingError::OutOfMemory),
+        }
     }
 
     fn get_bbox_for_element(
